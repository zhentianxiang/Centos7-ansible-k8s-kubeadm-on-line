---
- name: "在主ETCD节点上安装OpenSSL"
  ansible.builtin.yum:
    name: openssl
    state: present

- name: 创建etcd用户和组
  user:
    name: etcd
    comment: "ETCD User"
    shell: /sbin/nologin
    system: yes

- name: "为etcd证书创建目录"
  ansible.builtin.file:
    path: "{{ etcd_ssl  }}"
    state: directory
    owner: etcd
    group: etcd
    mode: '0755'

- name: "检查当前节点是否为主ETCD节点"
  ansible.builtin.set_fact:
    is_primary_etcd_node: "{{ inventory_hostname == groups['etcd'][0] }}"

- name: 检查 cfssl 是否已存在
  stat:
    path: /usr/local/bin/cfssl
  register: cfssl_file

- name: 下载 cfssl
  get_url:
    url: https://pkg.cfssl.org/R1.2/cfssl_linux-amd64
    dest: /usr/local/bin/cfssl
    mode: '0755'
    timeout: 30
  register: download_result
  retries: 10
  delay: 5
  until: download_result is succeeded
  when: not cfssl_file.stat.exists and is_primary_etcd_node

- name: 检查 cfssl-json 是否已存在
  stat:
    path: /usr/local/bin/cfssl-json
  register: cfssl_json_file

- name: 下载 cfssljson
  get_url:
    url: https://pkg.cfssl.org/R1.2/cfssljson_linux-amd64
    dest: /usr/local/bin/cfssl-json
    mode: '0755'
  register: download_result
  retries: 10  # 重试 10 次
  delay: 5     # 每次重试间隔 5 秒
  until: download_result is succeeded
  when: not cfssl_json_file.stat.exists and is_primary_etcd_node

- name: 检查 cfssl-certinfo 是否已存在
  stat:
    path: /usr/local/bin/cfssl-certinfo
  register: cfssl_certinfo_file

- name: 下载 cfssl-certinfo
  get_url:
    url: https://pkg.cfssl.org/R1.2/cfssl-certinfo_linux-amd64
    dest: /usr/local/bin/cfssl-certinfo
    mode: '0755'
  register: download_result
  retries: 10  # 重试 10 次
  delay: 5     # 每次重试间隔 5 秒
  until: download_result is succeeded
  when: not cfssl_certinfo_file.stat.exists and is_primary_etcd_node

- name: 生成 ca-config.json 文件
  template:
    src: templates/ca-config.json.j2
    dest: /etc/etcd/ssl/ca-config.json
    owner: etcd
    group: etcd
    mode: '0755'
  become: yes
  when: is_primary_etcd_node

- name: 生成 ca-csr.json 文件
  template:
    src: templates/ca-csr.json.j2
    dest: /etc/etcd/ssl/ca-csr.json
    owner: etcd
    group: etcd
    mode: '0755'
  become: yes
  when: is_primary_etcd_node

- name: 创建跟证书
  shell: cfssl gencert -initca ca-csr.json | cfssl-json -bare ca
  args:
    chdir: /etc/etcd/ssl
  when: is_primary_etcd_node


- name: 生成 server-csr.json 文件
  template:
    src: templates/server-csr.json.j2
    dest: /etc/etcd/ssl/server-csr.json
    owner: etcd
    group: etcd
    mode: '0755'
  become: yes
  when: is_primary_etcd_node


- name: 生成etcd证书
  shell: cfssl gencert -ca=ca.pem -ca-key=ca-key.pem -config=ca-config.json -profile=www server-csr.json | cfssl-json -bare server
  args:
    chdir: /etc/etcd/ssl
  when: is_primary_etcd_node

- name: 从etcd1获取文件
  fetch:
    src: "{{ etcd_ssl }}/{{ item }}"
    dest: "/tmp/{{ item }}"
    flat: yes
    owner: etcd
    group: etcd
    mode: '0755'
  run_once: true
  when: is_primary_etcd_node
  loop:
    - 'ca-key.pem'
    - 'ca.pem'
    - 'server-key.pem'
    - 'server.pem'

- name: 将CA和证书复制到所有etcd节点
  copy:
    src: "/tmp/{{ item }}"
    dest: "{{ etcd_ssl }}/{{ item }}"
    owner: etcd
    group: etcd
    mode: '0755'
  loop:
    - 'ca-key.pem'
    - 'ca.pem'
    - 'server-key.pem'
    - 'server.pem'

- name: 创建 /var/lib/etcd 目录
  file:
    path: "{{ etcd_data }}"
    state: directory
    owner: etcd
    group: etcd
    mode: '0750'
  become: yes

- name: 复制etcd配置
  template:
    src: etcd.conf.j2
    dest: "{{ etcd_conf }}/etcd.conf"
    owner: etcd
    group: etcd
    mode: '0644'

- name: 检查是否已经存在etcd二进制文件
  stat:
    path: "/usr/local/src/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
  register: etcd_file

- name: 下载etcd二进制文件
  get_url:
    url: "https://github.com/etcd-io/etcd/releases/download/{{ etcd_version }}/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
    dest: "/usr/local/src/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
    mode: '0755'
    timeout: 30  # 设置超时时间为 15 秒
  register: download_result
  retries: 10  # 重试 10 次
  delay: 5     # 每次重试间隔 5 秒
  until: download_result is succeeded
  when: etcd_file.stat.exists == False  # 仅当文件不存在时才进行下载

- name: 解压etcd压缩包
  unarchive:
    src: "/usr/local/src/etcd-{{ etcd_version }}-linux-amd64.tar.gz"
    dest: "/usr/local/src"
    remote_src: yes

- name: 移动 etcd 和 etcdctl 到 /usr/bin/
  command: mv /usr/local/src/etcd-{{ etcd_version }}-linux-amd64/{{ item }} /usr/bin/
  with_items:
    - etcd
    - etcdctl
  become: yes

- name: 赋予可执行权限
  file:
    path: /usr/bin/{{ item }}
    mode: '0755'
    state: file
  loop:
    - etcd
    - etcdctl

- name: 生成 etcd 服务文件
  template:
    src: templates/etcd.service.j2
    dest: /lib/systemd/system/etcd.service
    mode: '0644'
  become: yes

- name: 重新加载 systemd 服务文件
  systemd:
    daemon_reload: yes
  become: yes

- name: 禁用之前的 etcd 服务
  systemd:
    name: etcd
    state: stopped
    enabled: no
  ignore_errors: yes  # 如果服务没有启用，可以忽略错误
  become: yes

- name: 启动并启用 etcd 服务
  systemd:
    name: etcd
    state: restarted
    enabled: yes
  become: yes
